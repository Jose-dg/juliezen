# Generated by Django 5.2.7 on 2025-10-02 23:04

import django.contrib.postgres.indexes
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="IntegrationMessage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organization_id", models.UUIDField(db_index=True)),
                ("integration", models.CharField(default="alegra", max_length=50)),
                (
                    "direction",
                    models.CharField(
                        choices=[("inbound", "Inbound"), ("outbound", "Outbound")],
                        max_length=12,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Received"),
                            ("dispatched", "Dispatched"),
                            ("acknowledged", "Acknowledged"),
                            ("failed", "Failed"),
                            ("processed", "Processed"),
                        ],
                        default="received",
                        max_length=20,
                    ),
                ),
                ("event_type", models.CharField(blank=True, max_length=120)),
                ("external_reference", models.CharField(blank=True, max_length=191)),
                ("payload", models.JSONField(blank=True, default=dict)),
                ("response_payload", models.JSONField(blank=True, default=dict)),
                ("error_code", models.CharField(blank=True, max_length=64)),
                ("error_message", models.TextField(blank=True)),
                ("retries", models.PositiveIntegerField(default=0)),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("dispatched_at", models.DateTimeField(blank=True, null=True)),
                ("last_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("next_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("http_status", models.PositiveIntegerField(blank=True, null=True)),
                ("latency_ms", models.PositiveIntegerField(blank=True, null=True)),
                ("idempotency_key", models.CharField(blank=True, max_length=191)),
            ],
            options={
                "ordering": ("-received_at",),
                "indexes": [
                    models.Index(
                        fields=["organization_id", "integration", "external_reference"],
                        name="idx_integration_reference",
                    ),
                    models.Index(
                        fields=["status", "integration"], name="idx_integration_status"
                    ),
                    models.Index(
                        fields=[
                            "organization_id",
                            "integration",
                            "status",
                            "received_at",
                        ],
                        name="idx_integration_company_status",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["payload"], name="idx_integration_payload_gin"
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("external_reference__gt", "")),
                        fields=(
                            "organization_id",
                            "integration",
                            "direction",
                            "event_type",
                            "external_reference",
                        ),
                        name="uniq_integration_message_reference",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("idempotency_key__gt", "")),
                        fields=("organization_id", "integration", "idempotency_key"),
                        name="uniq_integration_idempotency",
                    ),
                ],
            },
        ),
    ]
